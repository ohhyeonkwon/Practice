[var]
-var의 선언은 전역 범위 혹은 함수 범위로 지정된다.
-var 변수가 함수 외부에서 선언될 때의 범위는 전역이므로 함수 블록 외부에서 var를 사용하여
 선언된 모든 변수를 전체 윈도우 상에서 사용할 수 있다.
-var 변수가 함수 내에서 선언될 때는 함수 범위로 지정되어 함수 내에서만 사용하고 접근할 수 있다.
-업데이트, 재선언 가능

<예시>
    function newFunction() {
        var hello = "hello";
    }
    console.log(hello); // error: hello is not defined

위의 예시에서는 hello는 함수 밖에서 사용할 수 없기 때문에 에러가 발생한다.

<var>의 문제점
    var greeter = "hey hi";
        var times = 4;
    
        if (times > 3) {
            var greeter = "say Hello instead"; 
        }
        console.log(greeter) // "say Hello instead"

위의 경우에서는 변수 greeting이 이미 정의되어 있다는 사실을 인식하지 못한 경우에는 문제가 될 수 있다.
만약 코드의 다른 부분에서 greeting을 사용한 적이 있다면 뜻밖의 출력 결과에 놀랄 수 있고 많은 버그를 발생시킬 수 있기에
let과 const가 필요하게 된 것이다.

[let]
-var선언에 대한 개선을 반영
-{}인 블록으로 바인딩된 코드로 해당 블록 내에서만 사용가능
-업데이트는 가능, 재선언은 불가능

<예시>
   let greeting = "say Hi";
   let times = 4;

   if (times > 3) {
        let hello = "say Hello instead";
        console.log(hello);// "say Hello instead"
    }
   console.log(hello) // hello is not defined

위 예시에서 볼 수 있듯, 중괄호로 감싸진 hello변수가 정의된 블록 외부에서 hello를 사용하니 에러가 반환되는 모습

<문제점>
    let greeting = "say Hi";
    let greeting = "say Hello instead"; // error: Identifier 'greeting' has already been declared

위의 코드에서 볼 수 있듯 let변수는 업데이트 될 수 있지만, 재선언은 불가능하다.
하지만 동일한 변수가 다른 범위 내에서 정의된다면 에러는 발생하지 않는다. 아래가 그 예시이다.
    let greeting = "say Hi";
    if (true) {
        let greeting = "say Hello instead";
        console.log(greeting); // "say Hello instead"
    }
    console.log(greeting); // "say Hi"

오류가 없는 이유는 간단하다. 두 예제가 서로 다른 범위를 가지기에 서로 다른 변수로 취급되기 때문이다.

[const]
-일정한 상수 값 유지
-let선언과 유사점 (선언된 블록 범위 내에서만 접근 가능)
-const는 업데이트도 재선언도 불가능

<예시1>
    const greeting = "say Hi";
    greeting = "say Hello instead";// error: Assignment to constant variable. 
<예시2>
    const greeting = "say Hi";
    const greeting = "say Hello instead";// error: Identifier 'greeting' has already been declared

const 변수는 위의 두 예시의 코드작업을 수행할 수 없다.
const 선언은 선언하는 당시에 초기화되어야하기 때문이다.
